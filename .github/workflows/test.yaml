name: tests
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+a[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+b[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true
  schedule:
    - cron: '0 15 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -e {0}

jobs:
  pre_commit:
    name: Run pre-commit
    runs-on: 'ubuntu-latest'
    steps:
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0

  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.MATRIX }}
      matrix_option: ${{ env.MATRIX_OPTION }}
    steps:
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-39", "test-313"],
              "exclude": [
                {
                  "environment": "test-39",
                  "os": "macos-latest"
                }
              ]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "environment": ["test-39", "test-313"],
              "include": [
                {
                  "environment": "test-39",
                  "os": "ubuntu-latest"
                },
                {
                  "environment": "test-310",
                  "os": "ubuntu-latest"
                },
                {
                  "environment": "test-311",
                  "os": "ubuntu-latest"
                },
                {
                  "environment": "test-312",
                  "os": "ubuntu-latest"
                }
              ],
              "exclude": [
                {
                  "environment": "test-39",
                  "os": "macos-latest"
                }
              ]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "environment": ["test-313"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  pixi_lock:
    name: Pixi lock
    runs-on: ubuntu-latest
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_lock@v0
        with:
          cache: ${{ github.event.inputs.cache == 'true' || github.event.inputs.cache == '' }}

  unit_test_suite:
    name: unit:${{ matrix.environment }}:${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 90

    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_install@v0
        with:
          environments: ${{ matrix.environment }}
      - name: Test Unit
        run: pixi run -e ${{ matrix.environment }} test-unit-cov
      - name: Test Geo
        run: pixi run -e ${{ matrix.environment }} test-unit-geo-cov
      - name: Test Examples
        run: pixi run -e ${{ matrix.environment }} test-example
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  core_test_suite:
    name: core:${{ matrix.environment }}:${{ matrix.os }}
    needs: [pre_commit, setup, pixi_lock]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        environment: ["test-core"]
    timeout-minutes: 120
    steps:
      - uses: holoviz-dev/holoviz_tasks/pixi_install@v0
        with:
          environments: ${{ matrix.environment }}
      - name: Test Unit
        run: pixi run -e ${{ matrix.environment }} test-unit

  pip_test:
    name: pip tests:${{ matrix.os }}:${{ matrix.environment }}
    needs: [pre_commit, setup]
    if: needs.setup.outputs.matrix_option == 'full'
    timeout-minutes: 90
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: install with geo
        run: python -m pip install -v --prefer-binary -e '.[tests, examples-tests, geo, hvdev, hvdev-geo, dev-extras]'
      - name: python version and pip list
        run: |
          python --version --version
          python -m pip list
      - name: download datasets
        run: python scripts/download_data.py
      - name: unit tests
        run: pytest -v hvplot --cov=hvplot --cov-append
      - name: unit tests geo
        run: pytest -v hvplot --geo --cov=hvplot --cov-append
      - name: examples tests
        run: pytest -n logical --dist loadscope --nbval-lax -p no:python
      - name: Upload coverage reports to Codecov
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          verbose: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  result_test_suite:
    name: result:test
    needs: [unit_test_suite, core_test_suite, pip_test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: check for failures
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: echo job failed && exit 1
