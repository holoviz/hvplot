name: tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
    inputs:
      target:
        description: "How much of the test suite to run"
        type: choice
        default: default
        options:
          - default
          - full
          - downstream
      cache:
        description: "Use cache"
        type: boolean
        default: true
  schedule:
    - cron: '0 15 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre_commit:
    name: Run pre-commit
    runs-on: 'ubuntu-latest'
    steps:
      - uses: holoviz-dev/holoviz_tasks/pre-commit@v0.1a19
  setup:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ env.MATRIX }}
      matrix_option: ${{ env.MATRIX_OPTION }}
    steps:
      - name: Set matrix option
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            OPTION=${{ github.event.inputs.target }}
          elif [[ '${{ github.event_name }}' == 'schedule' ]]; then
            OPTION="full"
          elif [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'tag' ]]; then
            OPTION="full"
          else
            OPTION="default"
          fi
          echo "MATRIX_OPTION=$OPTION" >> $GITHUB_ENV
      - name: Set test matrix with 'default' option
        if: env.MATRIX_OPTION == 'default'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "python-version": ["3.8", "3.12"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'full' option
        if: env.MATRIX_OPTION == 'full'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
              "python-version": ["3.8", "3.9", "3.10", "3.11", "3.12"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: Set test matrix with 'downstream' option
        if: env.MATRIX_OPTION == 'downstream'
        run: |
          MATRIX=$(jq -nsc '{
              "os": ["ubuntu-latest"],
              "python-version": ["3.12"]
          }')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV

  conda_suite:
    name: conda tests:${{ matrix.os }}:${{ matrix.python-version }}
    needs: [pre_commit, setup]
    if: needs.setup.outputs.matrix_option != 'default'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    timeout-minutes: 90
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          environment-file: envs/py${{ matrix.python-version }}-tests.yaml
          activate-environment: hvplottests
      - name: conda info
        run: conda info
      - name: conda list
        run: conda list
      - name: bokeh sampledata
        run: bokeh sampledata
      - name: unit tests
        run: pytest -v hvplot --cov=hvplot --cov-append
      - name: unit tests geo
        run: pytest -v hvplot --geo --cov=hvplot --cov-append
      - name: examples tests
        run: pytest -n auto --dist loadscope --nbval-lax -p no:python
  pip_test:
    name: pip tests:${{ matrix.os }}:${{ matrix.python-version }}
    needs: [pre_commit, setup]
    timeout-minutes: 90
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: upgrade pip / setuptools
        run: pip install -U pip setuptools
      - name: install without geo
        # Because cartopy cannot be installed on Python 3.8 on these platforms
        if: matrix.python-version == '3.8' && contains(fromJSON('["ubuntu-latest", "windows-latest"]'), matrix.os)
        run: pip install -ve '.[tests, examples-tests, hvdev]'
      - name: install with geo
        if: matrix.python-version != '3.8' || !contains(fromJSON('["ubuntu-latest", "windows-latest"]'), matrix.os)
        run: pip install -ve '.[tests, examples-tests, geo, hvdev, hvdev-geo]'
      - name: pip list
        run: pip list
      - name: bokeh sampledata
        run: bokeh sampledata
      - name: unit tests
        run: pytest -v hvplot --cov=hvplot --cov-append
      - name: unit tests geo
        run: pytest -v hvplot --geo --cov=hvplot --cov-append
      - name: examples tests
        run: pytest -n auto --dist loadscope --nbval-lax -p no:python
      - name: Upload coverage reports to Codecov
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          verbose: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
